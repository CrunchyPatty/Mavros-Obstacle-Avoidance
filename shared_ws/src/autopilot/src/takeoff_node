#!/usr/bin/env python

import rospy
from mavros_msgs.msg import State
from mavros_msgs.srv import CommandTOL
from mavros_msgs.srv import CommandBool
from mavros_msgs.srv import SetMode

# This function handles setting the drone to GUIDED mode.
def set_guided_mode():
    rospy.wait_for_service('/mavros/set_mode')
    try:
        set_mode = rospy.ServiceProxy('/mavros/set_mode', SetMode)
        resp = set_mode(custom_mode='GUIDED')
    except rospy.ServiceException as e:
        rospy.logerr("Service call failed: %s", e)


# Following functions handle the arming of the drone.
armed = False

def state_callback(msg):
    global armed
    armed = msg.armed

def arm_vehicle():
    rospy.wait_for_service('/mavros/cmd/arming')

    state_subscriber = rospy.Subscriber('/mavros/state', State, state_callback)
    arm_service = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)

    rate = rospy.Rate(0.5)

    while not rospy.is_shutdown():
        if not armed:
            try:
                rospy.loginfo("Trying to arm...")
                res = arm_service(True)
                if res.success:
                    rospy.loginfo("Drone armed successfully.")
            except rospy.ServiceException as e:
                rospy.logerr("Service call failed: %s", e)
        else:
            break
        rate.sleep()

# This function handles the initial takeoff of the drone.
def call_takeoff():
    rospy.wait_for_service('/mavros/cmd/takeoff')
    try:
        takeoff = rospy.ServiceProxy('/mavros/cmd/takeoff', CommandTOL)
        resp = takeoff(
            min_pitch=0.0,
            yaw=0.0,
            latitude=0.0,
            longitude=0.0,
            altitude=2.0
        )
    except rospy.ServiceException as e:
        rospy.logerr("Service call failed: %s", e)

if __name__ == "__main__":
    rospy.init_node('takeoff_node')

    rospy.sleep(10)  # Allow time for the system to initialize

    set_guided_mode()
    arm_vehicle()
    call_takeoff()